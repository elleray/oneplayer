package xy.media.oneplayer.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import xy.media.oneplayer.data.greendao.VideoGroupEncrypt;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_GROUP_ENCRYPT".
*/
public class VideoGroupEncryptDao extends AbstractDao<VideoGroupEncrypt, Long> {

    public static final String TABLENAME = "VIDEO_GROUP_ENCRYPT";

    /**
     * Properties of entity VideoGroupEncrypt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property State = new Property(1, Boolean.class, "state", false, "STATE");
        public final static Property Key = new Property(2, String.class, "key", false, "KEY");
    };


    public VideoGroupEncryptDao(DaoConfig config) {
        super(config);
    }
    
    public VideoGroupEncryptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_GROUP_ENCRYPT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATE\" INTEGER," + // 1: state
                "\"KEY\" TEXT);"); // 2: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_GROUP_ENCRYPT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoGroupEncrypt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state ? 1L: 0L);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(3, key);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VideoGroupEncrypt readEntity(Cursor cursor, int offset) {
        VideoGroupEncrypt entity = new VideoGroupEncrypt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // state
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // key
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VideoGroupEncrypt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VideoGroupEncrypt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VideoGroupEncrypt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
